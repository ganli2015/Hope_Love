#pragma once
#include "PublicHeader.h"

#include "../MindInterface/CommonFunction.h"

namespace DataCollection
{
	class GrammarFeatureTemplate;
	class GrammarFeature;

	struct Param_FindFeatures
	{
		shared_ptr<GrammarFeatureTemplate> featureTemplate;
		//The size of grammar feature generated by Method FindFeatures.
		int featureCount;
	};

	class Test_FindFeatures : public::testing::TestWithParam<Param_FindFeatures>
	{
		static vector<Param_FindFeatures> _res;
	public:
		static vector<Param_FindFeatures> GenerateSamples();

	private:
		//Add sample to <_res>.
		template<class T>
		static void PushSample(const int featureCount)
		{
			Param_FindFeatures param;
			param.featureTemplate = make_shared<T>();
			param.featureCount = featureCount;
			_res.push_back(param);
		}
	};


	struct Param_FeatureCount
	{
		shared_ptr<GrammarFeature> feature;
		//The size of grammar feature generated by Method FeatureCount.
		int featureCount;
	};

	class Test_FeatureCount : public::testing::TestWithParam<Param_FeatureCount>
	{
		static vector<Param_FeatureCount> _res;
	public:
		static vector<Param_FeatureCount> GenerateSamples();

	private:
		//Add sample to <_res>.
		static void PushSample(const shared_ptr<GrammarFeature> feature, const int featureCount)
		{
			Param_FeatureCount param;
			param.feature = feature;
			param.featureCount = featureCount;
			_res.push_back(param);
		}
	};

	struct Param_ReadWriteDB
	{
		shared_ptr<GrammarFeature> input;
	};

	class Test_ReadWriteDB : public::testing::TestWithParam<Param_ReadWriteDB>
	{
	protected:
		static string featureTable;
		static vector<Param_ReadWriteDB> _params;
	public:
		static vector<Param_ReadWriteDB> GenerateSamples();

	protected:
		static void ClearFeatureRows();
		static void PushSample(const shared_ptr<GrammarFeature> feature)
		{
			Param_ReadWriteDB param;
			param.input = feature;
			_params.push_back(param);
		}
	};
}


